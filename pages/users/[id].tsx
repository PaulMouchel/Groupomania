import { NextPage } from "next"
import styles from '../../styles/pages/User.module.scss'
import Head from 'next/head'
import Image from 'next/image'
import UserActivities from "../../components/UserActivities"
import UserSettings from "../../components/UserSettings"
import { useRouter } from 'next/router'
import UserType from "../../types/User"
import api from '../../api/axios'
import Avatar from '@mui/material/Avatar'
import Typography from '@mui/material/Typography'
import TextField from '@mui/material/TextField'
import Button from '@mui/material/Button'
import { useState, useEffect, useRef } from 'react'
import EditProfileModal from "../../components/EditProfileModal"
import useLocalStorage from '../../hooks/useLocalStorage'

const User: NextPage = () => {
    const router = useRouter()
    const { query, isReady } = router
    const { id } = query
    const userId = Number(id)

    const [ tab, setTab ] = useState<Number>(0)
    const [ user , setUser ] = useState<UserType | null>(null)
    const [ currentUser , setCurrentUser ] = useLocalStorage<UserType | null>("user", null);
    const [ isCurrentUser, setIsCurrentUser ] = useState<boolean>(false)
    const [ modalOpen, setModalOpen ] = useState<boolean>(false)
    const descriptionRef = useRef<HTMLInputElement>(null)

    useEffect(() => {
        if(!isReady || modalOpen) {
            return
        }
        const fetchUser = () => {
            api.get(`/users/${userId}`, {
                headers: {
                    "authorization": localStorage.getItem("token") || ""
                }
            })
            .then((response) => {
                setUser(response.data)
                if (descriptionRef && descriptionRef.current) {
                    descriptionRef.current.value = response.data.description
                }
                
            })
            .catch((error:unknown) => {
                console.log(error)
            })
        }
        fetchUser()
    }, [router, modalOpen])

    useEffect(() => {
        if (user && currentUser) {
            setIsCurrentUser(user.id === currentUser.id)
        } else {
            setIsCurrentUser(false)
        }
    }, [user, currentUser])

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            { isCurrentUser && currentUser && modalOpen && <EditProfileModal user={currentUser} closeModal={() => setModalOpen(false)}/> }
            <main className={styles.main}>
                <div className={styles.main__content}>
                    <div className={styles.header}>
                        <div className={styles.userpic}>
                            <Avatar alt={user ? user.name : "user pic"} src={user ? user.imageUrl : ""} sx={{ width: 250, height: 250 }} />
                        </div>
                        <span className={styles.username}>{user && user.name}</span>
                    </div>
                    { user && 
                        <>
                            <div className={styles.description}>
                                <Typography>{user.description}</Typography> 
                            </div>
                            { isCurrentUser && 
                                <div className={styles.change}>
                                    <Button variant="contained" onClick={() => setModalOpen(true)} >Modifier les informations</Button> 
                                </div>
                            }
                            <div className={styles.tabs}>
                                <div className={`${styles.tab} ${tab === 0 && styles.active}`} onClick={() => setTab(0)}>Activité</div>
                                <div className={`${styles.tab} ${tab === 1 && styles.active}`} onClick={() => setTab(1)}>Paramètres</div>
                            </div>
                    
                            <div className={styles['tab-content']}>
                                { currentUser && tab === 0 && <UserActivities user={user} currentUser={currentUser}/> }
                                { tab === 0 && <UserSettings/> }
                            </div>
                        </>
                    }
                </div>
            </main>


        </div>
    )
}
  
export default User
  